{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingsList.js\",\n    _s = $RefreshSig$();\n\n// Component Imports\nimport Painting from './Painting'; // Hooks Imports\n\nimport { useState } from 'react'; // Material-UI Imports\n\nimport { TextField } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { Box } from '@material-ui/core';\nimport { Container } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PaintingsList(props) {\n  _s();\n\n  // Use original list of paintings for comparison\n  const originalList = props.paintingsData; // Create filteredPaintings state to keep track of filtered paintings\n\n  const [filteredPaintings, filteredPaintingsSetter] = useState(props.paintings); // Create a function that's going to check each of our Painting objects against\n  // a Search query\n\n  function handleSearch(e) {\n    let filteredPaintingsList = []; // Potential Re-Factor Using Ternary Operator Structure (Re: Arthur)\n    // { e.target.value !== \"\" ? someFilterFunction : returnAllPaintings }\n    // filteredPaintingsList = originalList.filter(painting => painting.title.toLowerCase() === criterion.toLowerCase())\n    // function handleSearch(e)\n    // {\n    //   e.target.value !== \"\" ? filterFunction(e.target.value) :  filteredPaintingsSetter(props.paintings)\n    // }\n    // function filterFunction(criterion)\n    // {\n    //   let filteredPaintingsList = originalList.filter(painting => painting.title.toLowerCase().includes(criterion.toLowerCase()))\n    //   setFilteredPaintings(filteredPaintingsList)       \n    // }\n    // as we type, filter out the paintings that match\n    // our Search query and store in \"filteredPaintingsList\"\n\n    if (e.target.value !== \"\") {\n      filteredPaintingsList = originalList.filter(painting => {\n        const title = painting.title.toLowerCase();\n        const query = e.target.value.toLowerCase();\n        return title.includes(query);\n      });\n      filteredPaintingsSetter(filteredPaintingsList); // if the TextField is currently empty, then return all paintings\n      // using \"props.paintings\"  \n    } else {\n      filteredPaintingsSetter(props.paintings);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Paintings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"filled-basic\",\n        label: \"Filled\",\n        variant: \"filled\",\n        onChange: handleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        m: 5,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 10,\n          direction: \"row\",\n          children: filteredPaintings.map(painting => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 3,\n            children: /*#__PURE__*/_jsxDEV(Painting, {\n              painting: painting\n            }, painting.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PaintingsList, \"Ha+ngbJvWA+oBToDjEsFq8U+Qj4=\");\n\n_c = PaintingsList;\nexport default PaintingsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaintingsList\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingsList.js"],"names":["Painting","useState","TextField","Grid","Box","Container","PaintingsList","props","originalList","paintingsData","filteredPaintings","filteredPaintingsSetter","paintings","handleSearch","e","filteredPaintingsList","target","value","filter","painting","title","toLowerCase","query","includes","map","id"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,YAArB,C,CAEA;;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,SAAT,QAA0B,mBAA1B;;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAE5B;AACA,QAAMC,YAAY,GAAGD,KAAK,CAACE,aAA3B,CAH4B,CAK5B;;AACA,QAAM,CAACC,iBAAD,EAAoBC,uBAApB,IAA+CV,QAAQ,CAACM,KAAK,CAACK,SAAP,CAA7D,CAN4B,CAQ5B;AACA;;AACA,WAASC,YAAT,CAAsBC,CAAtB,EAAyB;AACvB,QAAIC,qBAAqB,GAAG,EAA5B,CADuB,CAGvB;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,QAAID,CAAC,CAACE,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AAEzBF,MAAAA,qBAAqB,GAAGP,YAAY,CAACU,MAAb,CAAoBC,QAAQ,IAAI;AACtD,cAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAT,CAAeC,WAAf,EAAd;AACA,cAAMC,KAAK,GAAGR,CAAC,CAACE,MAAF,CAASC,KAAT,CAAeI,WAAf,EAAd;AAEA,eAAOD,KAAK,CAACG,QAAN,CAAeD,KAAf,CAAP;AACD,OALuB,CAAxB;AAOAX,MAAAA,uBAAuB,CAACI,qBAAD,CAAvB,CATyB,CAWzB;AACA;AACD,KAbD,MAaO;AACLJ,MAAAA,uBAAuB,CAACJ,KAAK,CAACK,SAAP,CAAvB;AACD;AACF;;AAED,sBACE;AAAA,2BAIE,QAAC,SAAD;AAAW,MAAA,KAAK,EAAC,QAAjB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,SAAD;AACE,QAAA,EAAE,EAAC,cADL;AAEE,QAAA,KAAK,EAAC,QAFR;AAGE,QAAA,OAAO,EAAC,QAHV;AAIE,QAAA,QAAQ,EAAEC;AAJZ;AAAA;AAAA;AAAA;AAAA,cAHF,eAWE,QAAC,GAAD;AAAK,QAAA,CAAC,EAAE,CAAR;AAAA,+BACE,QAAC,IAAD;AACE,UAAA,SAAS,MADX;AAEE,UAAA,OAAO,EAAE,EAFX;AAGE,UAAA,SAAS,EAAC,KAHZ;AAAA,oBAMIH,iBAAiB,CAACc,GAAlB,CAAsBL,QAAQ,iBAC5B,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,EAAE,EAAE,CAAf;AAAA,mCACE,QAAC,QAAD;AAEE,cAAA,QAAQ,EAAEA;AAFZ,eACOA,QAAQ,CAACM,EADhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD;;GAxFQnB,a;;KAAAA,a;AA0FT,eAAeA,aAAf","sourcesContent":["// Component Imports\nimport Painting from './Painting';\n\n// Hooks Imports\nimport { useState } from 'react';\n\n// Material-UI Imports\nimport { TextField } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { Box } from '@material-ui/core';\nimport { Container } from '@material-ui/core';\n\nfunction PaintingsList(props) {\n  \n  // Use original list of paintings for comparison\n  const originalList = props.paintingsData;\n\n  // Create filteredPaintings state to keep track of filtered paintings\n  const [filteredPaintings, filteredPaintingsSetter] = useState(props.paintings);\n\n  // Create a function that's going to check each of our Painting objects against\n  // a Search query\n  function handleSearch(e) {\n    let filteredPaintingsList = [];\n    \n    // Potential Re-Factor Using Ternary Operator Structure (Re: Arthur)\n    // { e.target.value !== \"\" ? someFilterFunction : returnAllPaintings }\n\n    // filteredPaintingsList = originalList.filter(painting => painting.title.toLowerCase() === criterion.toLowerCase())\n\n    // function handleSearch(e)\n    // {\n    //   e.target.value !== \"\" ? filterFunction(e.target.value) :  filteredPaintingsSetter(props.paintings)\n    // }\n\n    // function filterFunction(criterion)\n    // {\n    //   let filteredPaintingsList = originalList.filter(painting => painting.title.toLowerCase().includes(criterion.toLowerCase()))\n    //   setFilteredPaintings(filteredPaintingsList)       \n    // }\n\n    // as we type, filter out the paintings that match\n    // our Search query and store in \"filteredPaintingsList\"\n    if (e.target.value !== \"\") {\n      \n      filteredPaintingsList = originalList.filter(painting => {\n        const title = painting.title.toLowerCase();\n        const query = e.target.value.toLowerCase();\n      \n        return title.includes(query);\n      });\n\n      filteredPaintingsSetter(filteredPaintingsList);\n    \n      // if the TextField is currently empty, then return all paintings\n      // using \"props.paintings\"  \n    } else {\n      filteredPaintingsSetter(props.paintings);\n    }\n  }\n\n  return(\n    <div>\n    {/* Shorthand JSX Parent Container Syntax */}\n    {/* <> */}\n\n      <Container align=\"center\">\n        <h1>Paintings</h1>\n        <hr />\n        <TextField \n          id=\"filled-basic\" \n          label=\"Filled\" \n          variant=\"filled\" \n          onChange={handleSearch}\n        />\n\n        {/* Implement Material-UI */}\n        <Box m={5}>\n          <Grid\n            container\n            spacing={10}\n            direction=\"row\"\n          >\n            {\n              filteredPaintings.map(painting => (\n                <Grid item xs={3}>\n                  <Painting\n                    key={painting.id}\n                    painting={painting}\n                  />\n                </Grid>\n              ))\n            }\n          </Grid>\n        </Box>\n      </Container>\n    \n    {/* </> */}\n    </div>\n  );\n}\n\nexport default PaintingsList;\n"]},"metadata":{},"sourceType":"module"}