{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingForm.js\",\n    _s = $RefreshSig$();\n\n// {/* Breakout Activity #1: Add Necessary Attributes to Make Remaining <input>s Controlled */}\n// {/* Extra Credit: How can we avoid using separate callback functions to handle each controlled <input>? */}\n// {/* Hint: Create a new state (formData) and \"name\" for each input to distinguish them from one another. */}\n// {/* Breakout Activity #2: Dynamically display a list of Added Titles / Artists as we continue to submit new Painting entries. */}\n// {/* Hint: Create a state called \"submittedData\" to store all submittedData. Map over this state\n// to create <div>s for each new Painting submission */}\n// What hook will we need to use?\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PaintingForm() {\n  _s();\n\n  // What state will we use to manage ImgURL input value?\n  // const [ imgUrl, imgUrlSetter ] = useState(\"\");\n  // const [ title, imgUrlSetter ] = useState(\"\");\n  // Create a state (formData) to manage all of our\n  // controlled inputs\n  const [formData, formDataSetter] = useState({\n    imgUrl: \"\",\n    title: \"\",\n    artistName: \"\",\n    date: \"\",\n    width: \"\",\n    height: \"\"\n  }); // Create a callback function to manage the onChange behavior for each of our controlled inputs\n  // function manageImgUrl(event) {\n  //     imgUrlSetter(event.target.value);\n  // }\n\n  function manageFormData(event) {\n    let myName = event.target.name;\n    let myValue = event.target.value; // formData = { firstName: \"Louis\", lastName: \"Medina\" }\n    // ...formData => { firstName: \"Louis\", lastName: \"Medina\" }\n\n    formDataSetter({ ...formData,\n      [myName]: myValue // [imgUrl]: \"My imgUrl\"\n\n    });\n  } // Capture all submitted data and store into a separate state (submittedData)\n\n\n  const [submittedData, submittedDataSetter] = useState([]); // Create a callback function to handle onSubmit behavior for our controlled form\n\n  function handleSubmit(event) {\n    // console.log(\"handleSubmit fired\");\n    // Prevent default form submission behavior\n    event.preventDefault(); // Capture submitted data (that we want)\n\n    const newFormData = {\n      title: formData.title,\n      imgUrl: formData.imgUrl\n    }; // Merge submitted data with existing form submissions\n    // submittedData => []\n    // [...submittedData, newFormData]\n\n    submittedDataSetter([...submittedData, newFormData]); // Clear out input values upon form submission\n  } // Return a bit of JSX that will contain our painting Title and imgUrl\n\n\n  const formSubmissions = submittedData.map((data, index) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Title: \", data.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"imgUrl: \", data.imgUrl]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, index + 1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Add a new Painting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"ImgURL\",\n        value: formData.imgUrl,\n        onChange: manageFormData,\n        name: \"imgUrl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: formData.title,\n        onChange: manageFormData,\n        name: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Artist Name\",\n        value: formData.artistName,\n        onChange: manageFormData,\n        name: \"artistName\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"date\",\n        value: formData.date,\n        onChange: manageFormData,\n        name: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"width\",\n        value: formData.width,\n        onChange: manageFormData,\n        name: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"height\",\n        value: formData.height,\n        onChange: manageFormData,\n        name: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"add new painting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), formSubmissions]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaintingForm, \"3TOd1vLYWjHzvxZKBdbxt/EVmUI=\");\n\n_c = PaintingForm;\nexport default PaintingForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaintingForm\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingForm.js"],"names":["useState","PaintingForm","formData","formDataSetter","imgUrl","title","artistName","date","width","height","manageFormData","event","myName","target","name","myValue","value","submittedData","submittedDataSetter","handleSubmit","preventDefault","newFormData","formSubmissions","map","data","index"],"mappings":"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","sourcesContent":["// {/* Breakout Activity #1: Add Necessary Attributes to Make Remaining <input>s Controlled */}\n// {/* Extra Credit: How can we avoid using separate callback functions to handle each controlled <input>? */}\n// {/* Hint: Create a new state (formData) and \"name\" for each input to distinguish them from one another. */}\n\n// {/* Breakout Activity #2: Dynamically display a list of Added Titles / Artists as we continue to submit new Painting entries. */}\n// {/* Hint: Create a state called \"submittedData\" to store all submittedData. Map over this state\n// to create <div>s for each new Painting submission */}\n\n// What hook will we need to use?\nimport { useState } from 'react';\n\nfunction PaintingForm(){\n    // What state will we use to manage ImgURL input value?\n    // const [ imgUrl, imgUrlSetter ] = useState(\"\");\n    // const [ title, imgUrlSetter ] = useState(\"\");\n\n    // Create a state (formData) to manage all of our\n    // controlled inputs\n    const [ formData, formDataSetter ] = useState({\n        imgUrl: \"\",\n        title: \"\",\n        artistName: \"\",\n        date: \"\",\n        width: \"\",\n        height: \"\"\n    });\n\n    // Create a callback function to manage the onChange behavior for each of our controlled inputs\n    // function manageImgUrl(event) {\n    //     imgUrlSetter(event.target.value);\n    // }\n\n    function manageFormData(event) {\n        let myName = event.target.name;\n        let myValue = event.target.value;\n\n        // formData = { firstName: \"Louis\", lastName: \"Medina\" }\n        // ...formData => { firstName: \"Louis\", lastName: \"Medina\" }\n\n        formDataSetter({\n            ...formData,\n            [myName]: myValue\n            // [imgUrl]: \"My imgUrl\"\n        });\n    }\n\n    // Capture all submitted data and store into a separate state (submittedData)\n    const [ submittedData, submittedDataSetter ] = useState([]);\n\n    // Create a callback function to handle onSubmit behavior for our controlled form\n    function handleSubmit(event) {\n        // console.log(\"handleSubmit fired\");\n\n        // Prevent default form submission behavior\n        event.preventDefault();\n\n        // Capture submitted data (that we want)\n        const newFormData = { title: formData.title, imgUrl: formData.imgUrl};\n\n        // Merge submitted data with existing form submissions\n        // submittedData => []\n        // [...submittedData, newFormData]\n\n        submittedDataSetter([...submittedData, newFormData]);\n\n        // Clear out input values upon form submission\n    }\n\n    // Return a bit of JSX that will contain our painting Title and imgUrl\n    const formSubmissions = submittedData.map((data, index) => {\n        return (\n            <>\n                <div key={index + 1}>\n                    <p>Title: {data.title}</p>\n                    <p>imgUrl: {data.imgUrl}</p>\n                </div>\n                <hr />\n            </>\n        )\n    }); \n\n    return (\n        <div>\n            <h1> Add a new Painting</h1>\n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\" \n                    placeholder=\"ImgURL\" \n                    value={formData.imgUrl} \n                    onChange={manageFormData}\n                    name=\"imgUrl\"\n                /><br/>\n                <input \n                    type=\"text\" \n                    placeholder=\"Title\" \n                    value={formData.title} \n                    onChange={manageFormData}\n                    name=\"title\"\n                />\n                <br/>\n                <input \n                    type=\"text\" \n                    placeholder=\"Artist Name\" \n                    value={formData.artistName}\n                    onChange={manageFormData}\n                    name=\"artistName\"\n                /><br/>\n                <input \n                    type=\"text\" \n                    placeholder=\"date\" \n                    value={formData.date}\n                    onChange={manageFormData}\n                    name=\"date\"\n                /><br/>\n                <input \n                    type=\"text\" \n                    placeholder=\"width\" \n                    value={formData.width}\n                    onChange={manageFormData}\n                    name=\"width\"\n                /><br/>\n                <input \n                    type=\"text\" \n                    placeholder=\"height\" \n                    value={formData.height}\n                    onChange={manageFormData}\n                    name=\"height\"\n                /><br/>\n\n                <input type=\"submit\" value=\"add new painting\"/>\n            </form>\n\n            {formSubmissions}\n        </div>\n    );\n}\n\nexport default PaintingForm;\n"]},"metadata":{},"sourceType":"module"}