{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingForm.js\",\n    _s = $RefreshSig$();\n\n{\n  /* Breakout Activity #1: Add Necessary Attributes to Make Remaining <input>s Controlled */\n}\n{\n  /* Extra Credit: How can we avoid using separate callback functions to handle each controlled <input>? */\n}\n{\n  /* Hint: Create a new state (formData) and \"name\" for each input to distinguish them from one another. */\n}\n{\n  /* Breakout Activity #2: Dynamically display a list of Added Titles / Artists as we continue to submit new Painting entries. */\n}\n{\n  /* Hint: Create a state called \"submittedData\" to store all submittedData. Map over this state\n  to create <div>s for each new Painting submission */\n} // What hook will we need to use?\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PaintingForm() {\n  _s();\n\n  // What state will we use to manage ImgURL input value?\n  const [ImgUrl, ImgUrlSetter] = useState(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Add a new Painting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"ImgURL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Artist Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 63\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 56\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"width\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"height\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 58\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"add new painting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaintingForm, \"ePSZ3dMrS9ilQoDYWazCsHjXtzg=\");\n\n_c = PaintingForm;\nexport default PaintingForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaintingForm\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingForm.js"],"names":["useState","PaintingForm","ImgUrl","ImgUrlSetter"],"mappings":";;;AAAA;AAAC;AAA2F;AAC5F;AAAC;AAA0G;AAC3G;AAAC;AAA0G;AAE3G;AAAC;AAAgI;AACjI;AAAC;AACD;AAAqD,C,CAErD;;AACA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,YAAT,GAAuB;AAAA;;AACnB;AACA,QAAM,CAAEC,MAAF,EAAUC,YAAV,IAA2BH,QAAQ,CAAC,EAAD,CAAzC;AAEA,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cADJ,eAC8C;AAAA;AAAA;AAAA;AAAA,cAD9C,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAE4C;AAAA;AAAA;AAAA;AAAA,cAF5C,eAGI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAHJ,eAGkD;AAAA;AAAA;AAAA;AAAA,cAHlD,eAII;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAJJ,eAI2C;AAAA;AAAA;AAAA;AAAA,cAJ3C,eAKI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cALJ,eAK4C;AAAA;AAAA;AAAA;AAAA,cAL5C,eAMI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,cANJ,eAM6C;AAAA;AAAA;AAAA;AAAA,cAN7C,eAQI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAnBQC,Y;;KAAAA,Y;AAqBT,eAAeA,YAAf","sourcesContent":["{/* Breakout Activity #1: Add Necessary Attributes to Make Remaining <input>s Controlled */}\n{/* Extra Credit: How can we avoid using separate callback functions to handle each controlled <input>? */}\n{/* Hint: Create a new state (formData) and \"name\" for each input to distinguish them from one another. */}\n\n{/* Breakout Activity #2: Dynamically display a list of Added Titles / Artists as we continue to submit new Painting entries. */}\n{/* Hint: Create a state called \"submittedData\" to store all submittedData. Map over this state\nto create <div>s for each new Painting submission */}\n\n// What hook will we need to use?\nimport { useState } from 'react';\n\nfunction PaintingForm(){\n    // What state will we use to manage ImgURL input value?\n    const [ ImgUrl, ImgUrlSetter ] = useState(\"\");\n    \n    return (\n        <div>\n            <h1> Add a new Painting</h1>\n            <form>\n                <input type=\"text\" placeholder=\"ImgURL\" /><br/>\n                <input type=\"text\" placeholder=\"Title\"/><br/>\n                <input type=\"text\" placeholder=\"Artist Name\"/><br/>\n                <input type=\"text\" placeholder=\"date\"/><br/>\n                <input type=\"text\" placeholder=\"width\"/><br/>\n                <input type=\"text\" placeholder=\"height\"/><br/>\n\n                <input type=\"submit\" value=\"add new painting\"/>\n            </form>\n        </div>\n    );\n}\n\nexport default PaintingForm;\n"]},"metadata":{},"sourceType":"module"}