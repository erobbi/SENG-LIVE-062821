{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingForm.js\",\n    _s = $RefreshSig$();\n\n// {/* Breakout Activity #1: Add Necessary Attributes to Make Remaining <input>s Controlled */}\n// {/* Extra Credit: How can we avoid using separate callback functions to handle each controlled <input>? */}\n// {/* Hint: Create a new state (formData) and \"name\" for each input to distinguish them from one another. */}\n// {/* Breakout Activity #2: Dynamically display a list of Added Titles / Artists as we continue to submit new Painting entries. */}\n// {/* Hint: Create a state called \"submittedData\" to store all submittedData. Map over this state\n// to create <div>s for each new Painting submission */}\n// What hook will we need to use?\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PaintingForm() {\n  _s();\n\n  // What state will we use to manage ImgURL input value?\n  // const [ imgUrl, imgUrlSetter ] = useState(\"\");\n  // const [ title, imgUrlSetter ] = useState(\"\");\n  // Create a state (formData) to manage all of our\n  // controlled inputs\n  const [formData, formDataSetter] = useState({\n    imgUrl: \"\",\n    title: \"\",\n    artistName: \"\",\n    date: \"\",\n    width: \"\",\n    height: \"\"\n  }); // Create a callback function to manage the onChange behavior for each of our controlled inputs\n  // function manageImgUrl(event) {\n  //     imgUrlSetter(event.target.value);\n  // }\n\n  function manageFormData(event) {}\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Add a new Painting\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"ImgURL\",\n        value: formData.imgUrl,\n        onChange: manageFormData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 108\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: formData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 81\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Artist Name\",\n        value: formData.artistName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 91\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"date\",\n        value: formData.date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 78\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"width\",\n        value: formData.width\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 80\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"height\",\n        value: formData.height\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 82\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"add new painting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaintingForm, \"iRQ5f+7oZc39dGyDvVlQQ1RR4vY=\");\n\n_c = PaintingForm;\nexport default PaintingForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaintingForm\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/05-react-forms/paintr-app/src/PaintingForm.js"],"names":["useState","PaintingForm","formData","formDataSetter","imgUrl","title","artistName","date","width","height","manageFormData","event"],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,YAAT,GAAuB;AAAA;;AACnB;AACA;AACA;AAEA;AACA;AACA,QAAM,CAAEC,QAAF,EAAYC,cAAZ,IAA+BH,QAAQ,CAAC;AAC1CI,IAAAA,MAAM,EAAE,EADkC;AAE1CC,IAAAA,KAAK,EAAE,EAFmC;AAG1CC,IAAAA,UAAU,EAAE,EAH8B;AAI1CC,IAAAA,IAAI,EAAE,EAJoC;AAK1CC,IAAAA,KAAK,EAAE,EALmC;AAM1CC,IAAAA,MAAM,EAAE;AANkC,GAAD,CAA7C,CAPmB,CAgBnB;AACA;AACA;AACA;;AAEA,WAASC,cAAT,CAAwBC,KAAxB,EAA+B,CAE9B;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,QAA/B;AAAwC,QAAA,KAAK,EAAET,QAAQ,CAACE,MAAxD;AAAgE,QAAA,QAAQ,EAAEM;AAA1E;AAAA;AAAA;AAAA;AAAA,cADJ,eAC+F;AAAA;AAAA;AAAA;AAAA,cAD/F,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,OAA/B;AAAuC,QAAA,KAAK,EAAER,QAAQ,CAACG;AAAvD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAEoE;AAAA;AAAA;AAAA;AAAA,cAFpE,eAGI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,aAA/B;AAA6C,QAAA,KAAK,EAAEH,QAAQ,CAACI;AAA7D;AAAA;AAAA;AAAA;AAAA,cAHJ,eAG8E;AAAA;AAAA;AAAA;AAAA,cAH9E,eAII;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,MAA/B;AAAsC,QAAA,KAAK,EAAEJ,QAAQ,CAACK;AAAtD;AAAA;AAAA;AAAA;AAAA,cAJJ,eAIiE;AAAA;AAAA;AAAA;AAAA,cAJjE,eAKI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,OAA/B;AAAuC,QAAA,KAAK,EAAEL,QAAQ,CAACM;AAAvD;AAAA;AAAA;AAAA;AAAA,cALJ,eAKmE;AAAA;AAAA;AAAA;AAAA,cALnE,eAMI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,WAAW,EAAC,QAA/B;AAAwC,QAAA,KAAK,EAAEN,QAAQ,CAACO;AAAxD;AAAA;AAAA;AAAA;AAAA,cANJ,eAMqE;AAAA;AAAA;AAAA;AAAA,cANrE,eAQI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAxCQR,Y;;KAAAA,Y;AA0CT,eAAeA,YAAf","sourcesContent":["// {/* Breakout Activity #1: Add Necessary Attributes to Make Remaining <input>s Controlled */}\n// {/* Extra Credit: How can we avoid using separate callback functions to handle each controlled <input>? */}\n// {/* Hint: Create a new state (formData) and \"name\" for each input to distinguish them from one another. */}\n\n// {/* Breakout Activity #2: Dynamically display a list of Added Titles / Artists as we continue to submit new Painting entries. */}\n// {/* Hint: Create a state called \"submittedData\" to store all submittedData. Map over this state\n// to create <div>s for each new Painting submission */}\n\n// What hook will we need to use?\nimport { useState } from 'react';\n\nfunction PaintingForm(){\n    // What state will we use to manage ImgURL input value?\n    // const [ imgUrl, imgUrlSetter ] = useState(\"\");\n    // const [ title, imgUrlSetter ] = useState(\"\");\n\n    // Create a state (formData) to manage all of our\n    // controlled inputs\n    const [ formData, formDataSetter ] = useState({\n        imgUrl: \"\",\n        title: \"\",\n        artistName: \"\",\n        date: \"\",\n        width: \"\",\n        height: \"\"\n    });\n\n    // Create a callback function to manage the onChange behavior for each of our controlled inputs\n    // function manageImgUrl(event) {\n    //     imgUrlSetter(event.target.value);\n    // }\n\n    function manageFormData(event) {\n\n    }\n\n    return (\n        <div>\n            <h1> Add a new Painting</h1>\n            <form>\n                <input type=\"text\" placeholder=\"ImgURL\" value={formData.imgUrl} onChange={manageFormData}/><br/>\n                <input type=\"text\" placeholder=\"Title\" value={formData.title} /><br/>\n                <input type=\"text\" placeholder=\"Artist Name\" value={formData.artistName}/><br/>\n                <input type=\"text\" placeholder=\"date\" value={formData.date}/><br/>\n                <input type=\"text\" placeholder=\"width\" value={formData.width}/><br/>\n                <input type=\"text\" placeholder=\"height\" value={formData.height}/><br/>\n\n                <input type=\"submit\" value=\"add new painting\"/>\n            </form>\n        </div>\n    );\n}\n\nexport default PaintingForm;\n"]},"metadata":{},"sourceType":"module"}