{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/06-side-effects-data-fetching/workshop-use-effect/src/exercise/02.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const textState = () => localStorage.getItem(\"text\") || \"\"; // ✅ update the initial state for text to read a value using localStorage.getItem(\"text\")\n\n\n  const [text, setText] = useState(textState);\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    // ✅ when the side effect runs, use localStorage.setItem(\"text\", value) to save the text to localStorage\n    console.log(\"Running side effect\");\n    localStorage.setItem(\"text\", text);\n  }, [text]); // ✅ use the dependencies array so that the side effect only runs if the text changes\n\n  console.log(\"Rendering component\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Text:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count => count + 1),\n      children: count\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"hkE2cqN7vEQyQF+d4mEfK62gLoI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/06-side-effects-data-fetching/workshop-use-effect/src/exercise/02.js"],"names":["useState","useEffect","App","textState","localStorage","getItem","text","setText","count","setCount","console","log","setItem","e","target","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,SAAS,GAAG,MAAMC,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgC,EAAxD,CADa,CAGb;;;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAACG,SAAD,CAAhC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACAP,IAAAA,YAAY,CAACQ,OAAb,CAAqB,MAArB,EAA6BN,IAA7B;AACD,GAJQ,EAIN,CAACA,IAAD,CAJM,CAAT,CAPa,CAYb;;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAEA,sBACE;AAAA,4BACE;AAAA,uCAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,KAAK,EAAEL,IAFT;AAGE,QAAA,QAAQ,EAAEO,CAAC,IAAIN,OAAO,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV;AAHxB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eASE;AAAQ,MAAA,OAAO,EAAE,MAAMN,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAA/B;AAAA,gBAAsDA;AAAtD;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GA7BQN,G;;KAAAA,G;AA+BT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction App() {\n  const textState = () => localStorage.getItem(\"text\") || \"\";\n  \n  // ✅ update the initial state for text to read a value using localStorage.getItem(\"text\")\n  const [text, setText] = useState(textState);\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    // ✅ when the side effect runs, use localStorage.setItem(\"text\", value) to save the text to localStorage\n    console.log(\"Running side effect\");\n    localStorage.setItem(\"text\", text);\n  }, [text]);\n  // ✅ use the dependencies array so that the side effect only runs if the text changes\n\n  console.log(\"Rendering component\");\n\n  return (\n    <div>\n      <label>\n        Text:\n        <input\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n        />\n      </label>\n      <button onClick={() => setCount(count => count + 1)}>{count}</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}