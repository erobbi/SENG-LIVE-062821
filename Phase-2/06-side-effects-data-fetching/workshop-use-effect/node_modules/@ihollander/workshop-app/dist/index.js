"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeApp = makeApp;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _history = require("history");

var _app = _interopRequireDefault(require("./react-app/app"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/* 
TODOS
- code organization?
- re-rendering - unmount?
- history location change - prevent unneeded rerenders and fix back button
- load CSS styles
*/
function addFonts() {
  var preconnect = document.createElement("link");
  preconnect.rel = "preconnect";
  preconnect.href = "https://fonts.gstatic.com";
  document.head.append(preconnect);
  var fontLink = document.createElement("link");
  fontLink.href = "https://fonts.googleapis.com/css2?family=Fira+Code&family=Lato:ital,wght@0,300;0,400;0,700;0,900;1,300;1,400;1,700;1,900&display=swap";
  fontLink.rel = "stylesheet";
  document.head.append(fontLink);

  if (window.frameElement) {
    var style = document.createElement("style");
    style.innerHTML = "body{margin:0;} #root{display:grid;place-items:center;height:100vh;}";
    document.head.append(style);
  }
}

var originalDocumentElement = document.documentElement;

function makeApp(_ref) {
  var imports = _ref.imports,
      fileInfo = _ref.fileInfo,
      projectTitle = _ref.projectTitle;
  // add fonts
  addFonts(); // build navigation

  var exercises = [];

  var _iterator = _createForOfIteratorHelper(fileInfo),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var info = _step.value;
      exercises[info.number] = exercises[info.number] || {};

      if (["exercise", "readme", "solution"].includes(info.type)) {
        info.importFn = imports[info.id];

        if (info.type === "solution") {
          exercises[info.number][info.type] = exercises[info.number][info.type] || [];
          exercises[info.number][info.type].push(info);
        } else {
          exercises[info.number][info.type] = info;
        }
      }
    } // create history and listen for changes
    // use this for the 'isolated' version of the site, which is useful for dev tools debugging

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  var history = (0, _history.createBrowserHistory)();
  var previousLocation = history.location;
  history.listen(handleLocationChange);
  handleLocationChange(); // when location changes, either run in 'isolated' mode or render the workshop app

  function handleLocationChange() {
    var _fileInfo$find;

    var location = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : history.location;
    var pathname = location.pathname;
    if (!pathname) return;
    var file;

    if (pathname !== null && pathname !== void 0 && pathname.startsWith("/isolated")) {
      // render isolated component
      var filePath = pathname.replace("/isolated", "src");
      file = fileInfo.find(function (f) {
        return f.filePath === filePath;
      });

      if (file) {
        renderIsolated(file);
      }
    } else {
      var number = Number(pathname.split("/").slice(-1)[0]);
      file = fileInfo.find(function (f) {
        return f.type === "readme" && f.number === number;
      });
      renderReact();
    } // set title
    // setTimeout(() => {


    var title = (_fileInfo$find = fileInfo.find(function (f) {
      var _file;

      return f.number === ((_file = file) === null || _file === void 0 ? void 0 : _file.number) && f.type === "readme";
    })) === null || _fileInfo$find === void 0 ? void 0 : _fileInfo$find.title;

    if (file && title) {
      var newTitle = "".concat(file.number, ". ").concat(title);

      if (document.title !== newTitle) {
        document.title = newTitle;
      }
    } // }, 100);


    previousLocation = location;
  } // this is actually gonna render every exercise and solution (in an iframe or in the window)


  function renderIsolated(file) {
    if (history.location !== previousLocation) return;
    file.importFn().then( /*#__PURE__*/function () {
      var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(module) {
        var component, domParser, newDocument, scripts, _iterator2, _step2, script, newScript, _iterator3, _step3, _script$getAttribute, attrName;

        return _regenerator.default.wrap(function (_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (typeof module.default === "function") {
                  // React component
                  component = /*#__PURE__*/_react.default.createElement(module.default);
                  render(component);
                } else if (typeof module.default === "string") {
                  // HTML file
                  domParser = new DOMParser();
                  newDocument = domParser.parseFromString(module.default, "text/html");
                  document.documentElement.replaceWith(newDocument.documentElement); // scripts need to be added manually so they'll actually run

                  scripts = document.querySelectorAll("script");
                  _iterator2 = _createForOfIteratorHelper(scripts);

                  try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                      script = _step2.value;
                      newScript = document.createElement("script");
                      _iterator3 = _createForOfIteratorHelper(script.getAttributeNames());

                      try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                          attrName = _step3.value;
                          // if (attrName === "src") {
                          //   // resolve path from src
                          //   const something = await import("../solution/temp/test.js");
                          // } else {
                          // }
                          newScript.setAttribute(attrName, (_script$getAttribute = script.getAttribute(attrName)) !== null && _script$getAttribute !== void 0 ? _script$getAttribute : "");
                        }
                      } catch (err) {
                        _iterator3.e(err);
                      } finally {
                        _iterator3.f();
                      }

                      newScript.innerHTML = script.innerHTML;
                      script.parentNode.insertBefore(newScript, script);
                      script.remove();
                    }
                  } catch (err) {
                    _iterator2.e(err);
                  } finally {
                    _iterator2.f();
                  }
                }

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function () {
        return _ref2.apply(this, arguments);
      };
    }());
  }

  function render(ui) {
    var root = document.getElementById("root");

    _reactDom.default.unmountComponentAtNode(root);

    _reactDom.default.render(ui, root);
  }

  function renderReact() {
    if (document.documentElement !== originalDocumentElement) {
      document.documentElement.replaceWith(originalDocumentElement);
    }

    _reactDom.default.render( /*#__PURE__*/_react.default.createElement(_app.default, {
      exercises: exercises,
      projectTitle: projectTitle
    }), document.getElementById("root"));
  }
}