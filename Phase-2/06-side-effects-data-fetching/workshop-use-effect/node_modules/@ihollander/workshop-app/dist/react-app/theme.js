"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThemeProvider = ThemeProvider;
exports.useTheme = useTheme;
exports.prismTheme = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ThemeContext = /*#__PURE__*/_react.default.createContext();

function getInitialColor() {
  var savedPreference = window.localStorage.getItem("__workshop_app_color_mode");
  if (savedPreference) return savedPreference;
  var query = window.matchMedia("(prefers-color-scheme: dark)");
  var theme = query && query.matches ? "dark" : "light";
  setVariables(theme);
  return theme;
}

var COLORS = {
  light: {
    "--font-color": "black",
    "--font-color-light": "#5e5e5e",
    "--background-primary": "#daf5fe",
    "--background-secondary": "white",
    "--background-secondary-light": "#f5fbfd",
    "--background-code": "white",
    "--color-primary": "blue",
    "--color-secondary": "red",
    "--pink": "#8501c6",
    "--purple": "#8501c6"
  },
  dark: {
    "--font-color": "white",
    "--font-color-light": "#b4b4b4",
    "--background-primary": "#030416",
    "--background-secondary": "#151f28",
    "--background-secondary-light": "#2b3c4b",
    "--background-code": "#151f28",
    "--color-primary": "#338fff",
    "--color-secondary": "#00efe1",
    "--pink": "#ff34f7",
    "--purple": "#e1a3ff"
  }
};
var CSS_PROPERTIES = ["--font-color", "--font-color-light", "--background-primary", "--background-secondary", "--background-secondary-light", "--background-code", "--color-primary", "--color-secondary", "--purple", "--pink"];

function setVariables(theme) {
  var root = window.document.documentElement;

  var _iterator = _createForOfIteratorHelper(CSS_PROPERTIES),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      root.style.setProperty(key, COLORS[theme][key]);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function ThemeProvider(_ref) {
  var children = _ref.children;

  var _React$useState = _react.default.useState(getInitialColor),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      colorMode = _React$useState2[0],
      setColorMode = _React$useState2[1];

  (0, _react.useEffect)(function () {
    setVariables(colorMode);
    window.localStorage.setItem("__workshop_app_color_mode", colorMode);
  }, [colorMode]);
  return /*#__PURE__*/_react.default.createElement(ThemeContext.Provider, {
    value: {
      colorMode: colorMode,
      setColorMode: setColorMode
    }
  }, children);
}

function useTheme() {
  return (0, _react.useContext)(ThemeContext);
}

var prismTheme = "\ncode[class*=\"language-\"],\npre[class*=\"language-\"] {\n\tcolor: var(--color-secondary);\n\tbackground: none;\n\tfont-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n\tfont-size: 0.8em;\n\ttext-align: left;\n\twhite-space: pre;\n\tword-spacing: normal;\n\tword-break: normal;\n\tword-wrap: normal;\n\tline-height: 1.5;\n\n\t-moz-tab-size: 4;\n\t-o-tab-size: 4;\n\ttab-size: 4;\n\n\t-webkit-hyphens: none;\n\t-moz-hyphens: none;\n\t-ms-hyphens: none;\n\thyphens: none;\n}\n\n/* Code blocks */\npre[class*=\"language-\"] {\n\tposition: relative;\n\toverflow: visible;\n\tpadding: 0;\n}\n\n.token.comment,\n.token.block-comment,\n.token.prolog,\n.token.doctype,\n.token.cdata {\n\tcolor: #7F848E;\n\tfont-style: italic;\n}\n\n.token.punctuation {\n\tcolor: var(--font-color-light);\n}\n\n.token.property,\n.token.tag,\n.token.boolean,\n.token.number,\n.token.function-name,\n.token.constant,\n.token.symbol,\n.token.deleted {\n\tcolor: var(--font-color);\n}\n\n.token.function,\n.token.builtin,\n.token.inserted {\n\tcolor: var(--color-primary);\n}\n\n.token.selector,\n.token.attr-name,\n.token.string,\n.token.char {\n  color: var(--purple);\n}\n\n.token.operator,\n.token.entity,\n.token.url,\n.token.variable {\n\tcolor: grey;\n}\n\n.token.atrule,\n.token.attr-value,\n.token.keyword,\n.token.class-name {\n\tcolor: var(--pink);\n}\n\n.token.regex,\n.token.important {\n\tcolor: #e90;\n}\n\n.language-css .token.string,\n.style .token.string {\n\tcolor: #a67f59;\n}\n\n.token.important {\n\tfont-weight: normal;\n}\n\n.token.bold {\n\tfont-weight: bold;\n}\n.token.italic {\n\tfont-style: italic;\n}\n\n.token.entity {\n\tcursor: help;\n}\n\n.token.namespace {\n\topacity: .7;\n}\n";
exports.prismTheme = prismTheme;