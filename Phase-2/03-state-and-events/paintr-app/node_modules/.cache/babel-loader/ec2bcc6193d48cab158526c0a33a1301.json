{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/03-state-and-events/paintr-app/src/components/Button.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Button({\n  name,\n  visibilityHandler\n}) {\n  _s();\n\n  // Create ONE state that will keep track of whether\n  // a Button has been toggled, \"isToggled\"\n  const [isToggled, setToggle] = useState(false);\n  return (\n    /*#__PURE__*/\n    // <>...</> is shorthand for <React.Fragment></React.Fragment>\n    _jsxDEV(_Fragment, {\n      children: name === \"cart\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setToggle(!isToggled),\n        children: isToggled ? \"Added to Cart\" : \"Add to Cart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setToggle(!isToggled),\n        children: isToggled ? '❤️' : '♡'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this)\n    }, void 0, false)\n  ); // Rendering conditional logic outside of return statement\n  // if (props.name === \"cart\") {\n  //     return (\n  //         <button onClick={() => setToggle(!isToggled)}>\n  //             { isToggled ? \"Added to Cart\" : \"Add to Cart\" }\n  //         </button>\n  //     );\n  // } else {\n  //     return (\n  //         <button onClick={() => setToggle(!isToggled)}>\n  //             { isToggled ? \"Liked\" : \"Like\" }\n  //         </button>\n  //     );\n  // }\n}\n\n_s(Button, \"0N8rM+siiPIc7BB56L7V11aq5J8=\");\n\n_c = Button;\n;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/03-state-and-events/paintr-app/src/components/Button.js"],"names":["useState","Button","name","visibilityHandler","isToggled","setToggle"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;;AAEA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAhB,EAA6C;AAAA;;AAEzC;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,SAAZ,IAAyBL,QAAQ,CAAC,KAAD,CAAvC;AAEA;AAAA;AACI;AACA;AAAA,gBACKE,IAAI,KAAK,MAAT,gBACG;AAAQ,QAAA,OAAO,EAAE,MAAMG,SAAS,CAAC,CAACD,SAAF,CAAhC;AAAA,kBACMA,SAAS,GAAG,eAAH,GAAqB;AADpC;AAAA;AAAA;AAAA;AAAA,cADH,gBAKG;AAAQ,QAAA,OAAO,EAAE,MAAMC,SAAS,CAAC,CAACD,SAAF,CAAhC;AAAA,kBACMA,SAAS,GAAG,IAAH,GAAU;AADzB;AAAA;AAAA;AAAA;AAAA;AANR;AAFJ,IANyC,CAqBzC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;GApCQH,M;;KAAAA,M;AAoCR;AAED,eAAeA,MAAf","sourcesContent":["import { useState } from 'react';\n\nfunction Button({ name, visibilityHandler }) {\n    \n    // Create ONE state that will keep track of whether\n    // a Button has been toggled, \"isToggled\"\n    const [isToggled, setToggle] = useState(false);\n    \n    return (\n        // <>...</> is shorthand for <React.Fragment></React.Fragment>\n        <>\n            {name === \"cart\" ? (\n                <button onClick={() => setToggle(!isToggled)}>\n                    { isToggled ? \"Added to Cart\" : \"Add to Cart\" }\n                </button>\n            ) : (\n                <button onClick={() => setToggle(!isToggled)}>\n                    { isToggled ? '❤️' : '♡' }\n                </button>\n            )}\n        </>\n    )    \n    \n    // Rendering conditional logic outside of return statement\n\n    // if (props.name === \"cart\") {\n    //     return (\n    //         <button onClick={() => setToggle(!isToggled)}>\n    //             { isToggled ? \"Added to Cart\" : \"Add to Cart\" }\n    //         </button>\n    //     );\n    // } else {\n    //     return (\n    //         <button onClick={() => setToggle(!isToggled)}>\n    //             { isToggled ? \"Liked\" : \"Like\" }\n    //         </button>\n    //     );\n    // }\n};\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}