{"ast":null,"code":"var _jsxFileName = \"/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/04-information-flow/paintr-app/src/App.js\",\n    _s = $RefreshSig$();\n\n// https://semantic-ui.com/\nimport 'semantic-ui-css/semantic.min.css'; // import all data from \"painting_data.js\"\n\nimport paintingsData from './painting_data'; // import useState Hook\n\nimport React, { useState } from 'react'; // Compontent Imports\n\nimport NavBar from './NavBar';\nimport PaintingsList from './PaintingsList';\nimport PaintingForm from './PaintingForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // Initialize \"color\", \"paintings\", and \"formView\" states\n  const [color, colorSetter] = useState(\"red\");\n  const [paintings, paintingsSetter] = useState(paintingsData);\n  const [formView, formViewSetter] = useState(false); // useState(\"red\") => Return an Array\n  // const [color, colorSetter] => Array Destructuring\n  // Create function to change Parent's \"color\" state (changeColor)\n\n  function changeColor(color) {\n    // console.log(\"changeColor fired!\");\n    colorSetter(color); // ...\n    // some more code\n  } // Breakout Activity #1: Create Function to Toggle Between PaintingForm / PaintingsList (toggleForm)\n  // ...\n\n\n  function toggleForm() {\n    // console.log(\"toggleForm fired!\")\n    formViewSetter(!formView);\n  } // Create function to sort Paintings by number of votes\n\n\n  function sortPaintings() {\n    // Store PaintingsData into a variable and use a reference\n    // point for sorting logic\n    let originalList = [...paintingsData]; // let x = [1,2,3,4,5]\n    // x.sort(firstNum, secondNum) ...\n    // Sort originalList by number of votes\n\n    const sortedList = originalList.sort((currentPainting, nextPainting) => {\n      let votesCurrentPainting = currentPainting.votes;\n      let votesNextPainting = nextPainting.votes; // Compare the two vote amounts\n      // -1 => keep currentPainting before nextPainting\n\n      if (votesCurrentPainting < votesNextPainting) return -1; // 1 => move currentPainting after nextPainting\n\n      if (votesCurrentPainting > votesNextPainting) return 1; // 0 => Keep in same place\n\n      return 0;\n    }); // Update value of Paintings state to reflect a sorted list\n\n    paintingsSetter(sortedList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      color: color,\n      title: \"Paintr\",\n      icon: \"paint brush\",\n      description: \"an app we made\" // Pass changeColor() as prop to NavBar\n      ,\n      changeColor: changeColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleForm,\n      children: \"Show/Hide New Painting Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sortPaintings,\n      children: \"Sort Paintings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), formView ? /*#__PURE__*/_jsxDEV(PaintingForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(PaintingsList, {\n      paintings: paintings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CsOolrA3m8Xeh6HAsYcWT3UVUsQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/louis/Desktop/Lectures/repos/duplicates/SENG-LIVE-062821/Phase-2/04-information-flow/paintr-app/src/App.js"],"names":["paintingsData","React","useState","NavBar","PaintingsList","PaintingForm","App","color","colorSetter","paintings","paintingsSetter","formView","formViewSetter","changeColor","toggleForm","sortPaintings","originalList","sortedList","sort","currentPainting","nextPainting","votesCurrentPainting","votes","votesNextPainting"],"mappings":";;;AAAA;AACA,OAAO,kCAAP,C,CAEA;;AACA,OAAOA,aAAP,MAA0B,iBAA1B,C,CAEA;;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CAEA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEb;AACA,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBN,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM,CAACO,SAAD,EAAYC,eAAZ,IAA+BR,QAAQ,CAACF,aAAD,CAA7C;AACA,QAAM,CAACW,QAAD,EAAWC,cAAX,IAA6BV,QAAQ,CAAC,KAAD,CAA3C,CALa,CAOb;AACA;AAEA;;AACA,WAASW,WAAT,CAAqBN,KAArB,EAA4B;AAC1B;AACAC,IAAAA,WAAW,CAACD,KAAD,CAAX,CAF0B,CAG1B;AACA;AACD,GAhBY,CAkBb;AACA;;;AACA,WAASO,UAAT,GAAsB;AACpB;AACAF,IAAAA,cAAc,CAAC,CAACD,QAAF,CAAd;AACD,GAvBY,CAyBb;;;AACA,WAASI,aAAT,GAAyB;AAEvB;AACA;AACA,QAAIC,YAAY,GAAG,CAAC,GAAGhB,aAAJ,CAAnB,CAJuB,CAMvB;AAEA;AAEA;;AACA,UAAMiB,UAAU,GAAGD,YAAY,CAACE,IAAb,CAAkB,CAACC,eAAD,EAAkBC,YAAlB,KAAmC;AACtE,UAAIC,oBAAoB,GAAGF,eAAe,CAACG,KAA3C;AACA,UAAIC,iBAAiB,GAAGH,YAAY,CAACE,KAArC,CAFsE,CAItE;AACA;;AACA,UAAID,oBAAoB,GAAGE,iBAA3B,EAA8C,OAAO,CAAC,CAAR,CANwB,CAQtE;;AACA,UAAIF,oBAAoB,GAAGE,iBAA3B,EAA8C,OAAO,CAAP,CATwB,CAWtE;;AACA,aAAO,CAAP;AACD,KAbkB,CAAnB,CAXuB,CA0BvB;;AACAb,IAAAA,eAAe,CAACO,UAAD,CAAf;AACD;;AAED,sBACE;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEV,KADT;AAEE,MAAA,KAAK,EAAC,QAFR;AAGE,MAAA,IAAI,EAAC,aAHP;AAIE,MAAA,WAAW,EAAC,gBAJd,CAME;AANF;AAOE,MAAA,WAAW,EAAEM;AAPf;AAAA;AAAA;AAAA;AAAA,YADF,eAYE;AAAQ,MAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAaE;AAAQ,MAAA,OAAO,EAAEC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbF,eAeE;AAAA;AAAA;AAAA;AAAA,YAfF,EAoBIJ,QAAQ,gBAAG,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAAH,gBAAsB,QAAC,aAAD;AAAe,MAAA,SAAS,EAAEF;AAA1B;AAAA;AAAA;AAAA;AAAA,YApBlC;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAhFQH,G;;KAAAA,G;AAkFT,eAAeA,GAAf","sourcesContent":["// https://semantic-ui.com/\nimport 'semantic-ui-css/semantic.min.css';\n\n// import all data from \"painting_data.js\"\nimport paintingsData from './painting_data'\n\n// import useState Hook\nimport React, { useState } from 'react';\n\n// Compontent Imports\nimport NavBar from './NavBar';\nimport PaintingsList from './PaintingsList';\nimport PaintingForm from './PaintingForm'\n\nfunction App() {\n\n  // Initialize \"color\", \"paintings\", and \"formView\" states\n  const [color, colorSetter] = useState(\"red\");\n  const [paintings, paintingsSetter] = useState(paintingsData);\n  const [formView, formViewSetter] = useState(false);\n\n  // useState(\"red\") => Return an Array\n  // const [color, colorSetter] => Array Destructuring\n\n  // Create function to change Parent's \"color\" state (changeColor)\n  function changeColor(color) {\n    // console.log(\"changeColor fired!\");\n    colorSetter(color);\n    // ...\n    // some more code\n  }\n\n  // Breakout Activity #1: Create Function to Toggle Between PaintingForm / PaintingsList (toggleForm)\n  // ...\n  function toggleForm() {\n    // console.log(\"toggleForm fired!\")\n    formViewSetter(!formView);\n  }\n\n  // Create function to sort Paintings by number of votes\n  function sortPaintings() {\n    \n    // Store PaintingsData into a variable and use a reference\n    // point for sorting logic\n    let originalList = [...paintingsData];\n\n    // let x = [1,2,3,4,5]\n\n    // x.sort(firstNum, secondNum) ...\n\n    // Sort originalList by number of votes\n    const sortedList = originalList.sort((currentPainting, nextPainting) => {\n      let votesCurrentPainting = currentPainting.votes;\n      let votesNextPainting = nextPainting.votes;\n\n      // Compare the two vote amounts\n      // -1 => keep currentPainting before nextPainting\n      if (votesCurrentPainting < votesNextPainting) return -1;\n      \n      // 1 => move currentPainting after nextPainting\n      if (votesCurrentPainting > votesNextPainting) return 1;\n\n      // 0 => Keep in same place\n      return 0;\n    });\n\n    // Update value of Paintings state to reflect a sorted list\n    paintingsSetter(sortedList);\n  }\n\n  return (\n    <div>\n      <NavBar\n        color={color}\n        title=\"Paintr\"\n        icon=\"paint brush\"\n        description=\"an app we made\"\n\n        // Pass changeColor() as prop to NavBar\n        changeColor={changeColor}\n      />\n\n      {/* Add toggleForm click behavior */}\n      <button onClick={toggleForm}>Show/Hide New Painting Form</button>\n      <button onClick={sortPaintings}>Sort Paintings</button>\n      \n      <hr />\n\n      {/* Breakout Activity #1: Render PaintingForm or PaintingsList Components based upon toggleForm */}\n      {/* ... */}\n\n      { formView ? <PaintingForm /> : <PaintingsList paintings={paintings} /> }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}